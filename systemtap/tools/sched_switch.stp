#! /usr/bin/env stap

/* 
 * sched_switch.stp    Trace the scheduler switches happening with the process.
 *
 * Usage: sudo stap sched_switch.stp -x <pid>
 * Doc: See sched_switch.md.
 *
 * This script works similar to ftrace's sched_switch. It displays a list of
 * processes which get switched in and out of the scheduler. The format of display
 * is PROCESS_NAME PROCESS_PID CPU TIMESTAMP PID: PRIORITY: PROCESS STATE ==>/+
 *    NEXT_PID : NEXT_PRIORITY: NEXT_STATE NEXT_PROCESS_NAME
 * ==> indicates that prev process is scheduled out and the next process is
 *    scheduled in.
 * + indicates that prev process has woken up the next process.
 */

function state_calc(state) {
    if(state == 0)
        status = "R"
    if(state == 1)
        status = "S"
    if(state == 2)
        status = "D"
    if(state == 4)
        status = "T"
    if(state == 8)
        status = "T"
    if(state == 16)
        status = "Z"
    if(state == 32)
        status = "EXIT_DEAD"
    return status
}

probe scheduler.wakeup
{
    if (task_pid != target() && pid() != target())
        next

    printf("%-16s%5d %5d %5d:%5d:%s +   %5d:%5d:%s %-16s\n",
        execname(), task_cpu(task), gettimeofday_ns(),
        pid(), task_prio(task_current()),
        state_calc(task_state(task_current())),
        task_pid(task), task_prio(task), state_calc(task_state(task)),
        task_execname(task))
}

probe scheduler.ctxswitch
{
    if (next_pid != target() && prev_pid != target())
        next

    printf("%-16s%5d %5d %5d:%5d:%s ==> %5d:%5d:%s %-16s\n",prev_task_name,
        task_cpu(prev_task),gettimeofday_ns(),prev_pid,prev_priority,
        state_calc(prevtsk_state),next_pid,
        next_priority,state_calc(nexttsk_state),next_task_name)
}

probe begin
{
    printf("%-17s %3s %19s %5s: %3s:%s  %8s: %3s:%s %-17s\n", 
        "PROCESS_NAME","CPU","TIMESTAMP","PID", "PRIO","S",
        "NEXT_PID","PRIO","S","NEXT_PROCESS_NAME")
}
